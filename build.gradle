// FIXME: add test if voices exist in the class path !
buildscript {

    def maryttsVersion = '6.0.1-SNAPSHOT'

    repositories {
        /*
         maven {
         url 'https://oss.jfrog.org/artifactory/repo'
     }
         */
        maven {
            url 'https://oss.jfrog.org/artifactory/oss-snapshot-local'
        }
        jcenter()
    }
    dependencies {

	classpath group: "com.github.steveash.jg2p", name:"jg2p-pipe-cmu", version: "1.1.0"
	classpath group: "com.github.steveash.jg2p", name:"jg2p-syllg-cmu", version: "1.1.0"

/*
        classpath group: "de.dfki.mary", name: "marytts-g2pcrf", version: "0.1-SNAPSHOT"
        classpath group: 'de.dfki.mary', name: 'marytts-common', version: maryttsVersion
        ['en'].each { locale ->
            classpath group: 'de.dfki.mary', name: "marytts-lang-$locale", version: maryttsVersion
        }
*/
    }
}


apply plugin: 'java'

sourceCompatibility = 1.8
targetCompatibility = 1.8


dependencies {
    compile group:"org.json", name:"json", version:"20090211"

}


/**********************************************************************************
 ** MaryTTS import and starting part
 **********************************************************************************/
import marytts.runutils.*;
import marytts.config.JSONMaryConfigLoader;
import marytts.config.MaryConfiguration;


// G2P CRF
import com.github.steveash.jg2p.model.CmuEncoderFactory;
import com.github.steveash.jg2p.SimpleEncoder;
import com.github.steveash.jg2p.model.CmuSyllabifierFactory;
import com.github.steveash.jg2p.syllchain.Syllabifier;

/**********************************************************************************
 ** Main tasks
 **********************************************************************************/
task mary_init() {
    doLast {
        if (Mary.getCurrentState() != Mary.STATE_RUNNING) {
	    Mary.startup();
        }
    }
}

task test_mary(dependsOn:mary_init) {

    doLast {

        if (Mary.getCurrentState() != Mary.STATE_RUNNING) {
            throw new IllegalStateException("MARY system is not running");
        }


        Exception save_ex = null;
        Object output = null;
	Request request = null;
	def configuration = (new File("src/config.json")).text
	(new File("src/in.txt")).eachLine { input_data ->
	    // Loading input
	    InputStream configuration_stream = new ByteArrayInputStream(configuration.getBytes("UTF-8"));
	    MaryConfiguration conf_object = (new JSONMaryConfigLoader()).loadConfiguration(configuration_stream);

	    // Send request to mary
            request = new Request(conf_object, input_data);
            request.process();
            output = request.serializeFinaleUtterance();


	    // Retrieve logger if necessary
            String log_result = "";
	    ByteArrayOutputStream baos_logger = request.getBaosLogger();
	    if (baos_logger != null) {
	    	log_result = baos_logger.toString("UTF-8");
		project.logger.debug("log = \n" + log_result)
	    }
	    print(output.toString());
	}
    }
}

task mary_stop(dependsOn: test_mary) {
    // doLast {
    // 	Mary.shutdown();
    // }
}
